;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name turtle.core, :imports nil, :requires nil, :uses nil, :defs {update-fill {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 15, :column 8, :end-line 15, :end-column 19, :private true, :arglists (quote ([state color]))}, :private true, :name turtle.core/update-fill, :variadic false, :file "js/out/turtle/core.cljs", :end-column 19, :method-params ([state color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state color]))}, update-color {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 14, :column 8, :end-line 14, :end-column 20, :private true, :arglists (quote ([state color]))}, :private true, :name turtle.core/update-color, :variadic false, :file "js/out/turtle/core.cljs", :end-column 20, :method-params ([state color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state color]))}, pen-ops {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 20, :column 8, :end-line 20, :end-column 15, :private true, :arglists (quote ([state pen]))}, :private true, :name turtle.core/pen-ops, :variadic false, :file "js/out/turtle/core.cljs", :end-column 15, :method-params ([state pen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state pen]))}, radians {:name turtle.core/radians, :file "js/out/turtle/core.cljs", :line 10, :column 1, :end-line 10, :end-column 13, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 10, :column 6, :end-line 10, :end-column 13}}, pop-state {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 18, :column 8, :end-line 18, :end-column 17, :private true, :arglists (quote ([state _]))}, :private true, :name turtle.core/pop-state, :variadic false, :file "js/out/turtle/core.cljs", :end-column 17, :method-params ([state _]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state _]))}, calc-matrix-transform {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 24, :column 8, :end-line 24, :end-column 29, :private true, :arglists (quote ([[screen-x screen-y] [[min-x min-y] [max-x max-y]]])), :doc "Calculates an affine transform matrix which will scale a drawing \n   constrained by the min/max bounds to the given screen co-ords. Note\n   that the drawing is flipped so (0,0) will be represented at (or near)\n   the lower edge, not the upper edge."}, :private true, :name turtle.core/calc-matrix-transform, :variadic false, :file "js/out/turtle/core.cljs", :end-column 29, :method-params ([p__5813 p__5814]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[screen-x screen-y] [[min-x min-y] [max-x max-y]]])), :doc "Calculates an affine transform matrix which will scale a drawing \n   constrained by the min/max bounds to the given screen co-ords. Note\n   that the drawing is flipped so (0,0) will be represented at (or near)\n   the lower edge, not the upper edge."}, deg->rad {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 11, :column 8, :end-line 11, :end-column 16, :private true, :arglists (quote ([theta]))}, :private true, :name turtle.core/deg->rad, :variadic false, :file "js/out/turtle/core.cljs", :end-column 16, :method-params ([theta]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([theta]))}, next-state {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 22, :column 8, :end-line 22, :end-column 18, :private true, :arglists (quote ([] [curr-state] [curr-state [cmd & [peek-ahead]]])), :doc "Evolves the current state and a given command to determine the next state,\n   e.g. if the current position is (4,3) pointing north, then move to (4,4)\n   and turn in to the heading relative to the command.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [curr-state] [curr-state [cmd & [peek-ahead]]]), :arglists ([] [curr-state] [curr-state [cmd & [peek-ahead]]]), :arglists-meta (nil nil nil)}}, :private true, :name turtle.core/next-state, :variadic false, :file "js/out/turtle/core.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [curr-state] [curr-state [cmd & [peek-ahead]]]), :arglists ([] [curr-state] [curr-state [cmd & [peek-ahead]]]), :arglists-meta (nil nil nil)}, :method-params ([] [curr-state] [curr-state [cmd & [peek-ahead]]]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists ([] [curr-state] [curr-state [cmd & [peek-ahead]]]), :doc "Evolves the current state and a given command to determine the next state,\n   e.g. if the current position is (4,3) pointing north, then move to (4,4)\n   and turn in to the heading relative to the command."}, color-index {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 16, :column 8, :end-line 16, :end-column 19, :private true, :arglists (quote ([state index]))}, :private true, :name turtle.core/color-index, :variadic false, :file "js/out/turtle/core.cljs", :end-column 19, :method-params ([state index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state index]))}, push-state {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 17, :column 8, :end-line 17, :end-column 18, :private true, :arglists (quote ([state _]))}, :private true, :name turtle.core/push-state, :variadic false, :file "js/out/turtle/core.cljs", :end-column 18, :method-params ([state _]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state _]))}, goto-origin {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 19, :column 8, :end-line 19, :end-column 19, :private true, :arglists (quote ([state _]))}, :private true, :name turtle.core/goto-origin, :variadic false, :file "js/out/turtle/core.cljs", :end-column 19, :method-params ([state _]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state _]))}, adjust-to-zero {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 9, :column 8, :end-line 9, :end-column 22, :private true, :arglists (quote ([[[min-x min-y] [max-x max-y]]]))}, :private true, :name turtle.core/adjust-to-zero, :variadic false, :file "js/out/turtle/core.cljs", :end-column 22, :method-params ([p__5794]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[[min-x min-y] [max-x max-y]]]))}, extend-margin {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 8, :column 8, :end-line 8, :end-column 21, :private true, :arglists (quote ([[[min-x min-y] [max-x max-y]] margin]))}, :private true, :name turtle.core/extend-margin, :variadic false, :file "js/out/turtle/core.cljs", :end-column 21, :method-params ([p__5787 margin]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[[min-x min-y] [max-x max-y]] margin]))}, process {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 23, :column 8, :end-line 23, :end-column 15, :private true, :arglists (quote ([cmds]))}, :private true, :name turtle.core/process, :variadic false, :file "js/out/turtle/core.cljs", :end-column 15, :method-params ([cmds]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cmds]))}, colors {:name turtle.core/colors, :file "js/out/turtle/core.cljs", :line 6, :column 1, :end-line 6, :end-column 12, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 6, :column 6, :end-line 6, :end-column 12}}, move-forward {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 12, :column 8, :end-line 12, :end-column 20, :private true, :arglists (quote ([state dist])), :doc "Given a state (containing a heading), move forward by the supplied\n   distance."}, :private true, :name turtle.core/move-forward, :variadic false, :file "js/out/turtle/core.cljs", :end-column 20, :method-params ([state dist]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state dist])), :doc "Given a state (containing a heading), move forward by the supplied\n   distance."}, bounding-box {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 7, :column 8, :end-line 7, :end-column 20, :private true, :arglists (quote ([coords])), :doc "Calculates the smallest and largest [x,y] points"}, :private true, :name turtle.core/bounding-box, :variadic false, :file "js/out/turtle/core.cljs", :end-column 20, :method-params ([coords]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coords])), :doc "Calculates the smallest and largest [x,y] points"}, turn {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 13, :column 8, :end-line 13, :end-column 12, :private true, :arglists (quote ([op state angle])), :doc "Given a state, and an operation (either the + or - function),\n   update such that the new heading is altered by the angle"}, :private true, :name turtle.core/turn, :variadic false, :file "js/out/turtle/core.cljs", :end-column 12, :method-params ([op state angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 3, :fn-var true, :arglists (quote ([op state angle])), :doc "Given a state, and an operation (either the + or - function),\n   update such that the new heading is altered by the angle"}, draw! {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 25, :column 7, :end-line 25, :end-column 12, :arglists (quote ([renderer cmds & [screen-area]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(renderer cmds [screen-area])], :arglists ([renderer cmds & [screen-area]]), :arglists-meta (nil)}}, :name turtle.core/draw!, :variadic true, :file "js/out/turtle/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(renderer cmds [screen-area])], :arglists ([renderer cmds & [screen-area]]), :arglists-meta (nil)}, :method-params [(renderer cmds [screen-area])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists ([renderer cmds & [screen-area]])}, move-op? {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 26, :column 7, :end-line 26, :end-column 15, :arglists (quote ([command]))}, :name turtle.core/move-op?, :variadic false, :file "js/out/turtle/core.cljs", :end-column 15, :method-params ([command]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([command]))}, state-mapper {:name turtle.core/state-mapper, :file "js/out/turtle/core.cljs", :line 21, :column 1, :end-line 21, :end-column 18, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/core.cljs", :line 21, :column 6, :end-line 21, :end-column 18}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:orange :restore-point :color :color-index :yellow :coords :restore :fill :green :cyan :move :save :up :red :blue :pen :stack :right :origin :magenta :fwd :heading :left :black}, :order [:red :green :blue :yellow :cyan :magenta :orange :black :heading :coords :color :fill :stack :restore-point :up :move :color-index :restore :save :pen :right :origin :fwd :left]}, :doc nil}