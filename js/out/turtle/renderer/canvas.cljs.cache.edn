;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name turtle.renderer.canvas, :imports nil, :requires {monet.canvas monet.canvas}, :uses {begin-path monet.canvas, stroke monet.canvas, transform monet.canvas, stroke-style monet.canvas, close-path monet.canvas, restore monet.canvas, move-to monet.canvas, fill monet.canvas, line-to monet.canvas, save monet.canvas, stroke-cap monet.canvas, stroke-width monet.canvas, fill-style monet.canvas}, :defs {draw-op {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/renderer/canvas.cljs", :line 5, :column 8, :end-line 5, :end-column 15, :private true, :arglists (quote ([state]))}, :private true, :name turtle.renderer.canvas/draw-op, :variadic false, :file "js/out/turtle/renderer/canvas.cljs", :end-column 15, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, draw-path-segments! {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/renderer/canvas.cljs", :line 10, :column 8, :end-line 10, :end-column 27, :private true, :arglists (quote ([ctx data]))}, :private true, :name turtle.renderer.canvas/draw-path-segments!, :variadic false, :file "js/out/turtle/renderer/canvas.cljs", :end-column 27, :method-params ([ctx data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx data]))}, ->canvas {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/turtle/renderer/canvas.cljs", :line 37, :column 7, :end-line 37, :end-column 15, :arglists (quote ([ctx]))}, :name turtle.renderer.canvas/->canvas, :variadic false, :file "js/out/turtle/renderer/canvas.cljs", :end-column 15, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:restore-point :color :coords :fill :move :square}, :order [:restore-point :move :coords :fill :color :square]}, :doc nil}