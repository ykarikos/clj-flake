;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name monet.canvas, :imports nil, :requires {core monet.core, monet.core monet.core}, :uses nil, :defs {begin-path {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 11, :column 7, :end-line 11, :end-column 17, :arglists (quote ([ctx]))}, :name monet.canvas/begin-path, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 17, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, stop-updating {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 263, :column 7, :end-line 263, :end-column 20, :arglists (quote ([mc]))}, :name monet.canvas/stop-updating, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 20, :method-params ([mc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 263, :end-line 263, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mc]))}, rect {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 31, :column 7, :end-line 31, :end-column 11, :arglists (quote ([ctx {:keys [x y w h]}])), :doc "DEPRECATED. Prefer fill-rect"}, :name monet.canvas/rect, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 11, :method-params ([ctx p__5840]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx {:keys [x y w h]}])), :doc "DEPRECATED. Prefer fill-rect"}, entity {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 214, :column 7, :end-line 214, :end-column 13, :arglists (quote ([v update draw]))}, :name monet.canvas/entity, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 13, :method-params ([v update draw]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 3, :fn-var true, :arglists (quote ([v update draw]))}, rounded-rect {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 175, :column 7, :end-line 175, :end-column 19, :arglists (quote ([ctx {:keys [x y w h r]}]))}, :name monet.canvas/rounded-rect, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 19, :method-params ([ctx p__5910]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx {:keys [x y w h r]}]))}, composition-operation {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 89, :column 7, :end-line 89, :end-column 28, :arglists (quote ([ctx operation]))}, :name monet.canvas/composition-operation, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 28, :method-params ([ctx operation]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx operation]))}, clear-rect {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 27, :column 7, :end-line 27, :end-column 17, :arglists (quote ([ctx {:keys [x y w h]}]))}, :name monet.canvas/clear-rect, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 17, :method-params ([ctx p__5835]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx {:keys [x y w h]}]))}, text {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 53, :column 7, :end-line 53, :end-column 11, :arglists (quote ([ctx {:keys [text x y]}]))}, :name monet.canvas/text, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 11, :method-params ([ctx p__5860]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx {:keys [text x y]}]))}, attr {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 219, :column 8, :end-line 219, :end-column 12, :private true, :arglists (quote ([e a]))}, :private true, :name monet.canvas/attr, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 12, :method-params ([e a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 2, :fn-var true, :arglists (quote ([e a]))}, bezier-curve-to {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 167, :column 7, :end-line 167, :end-column 22, :arglists (quote ([ctx cp1x cp1y cp2x cp2y x y] [ctx {:keys [cp1x cp1y cp2x cp2y x y]}])), :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([ctx cp1x cp1y cp2x cp2y x y] [ctx {:keys [cp1x cp1y cp2x cp2y x y]}]), :arglists ([ctx cp1x cp1y cp2x cp2y x y] [ctx {:keys [cp1x cp1y cp2x cp2y x y]}]), :arglists-meta (nil nil)}}, :name monet.canvas/bezier-curve-to, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([ctx cp1x cp1y cp2x cp2y x y] [ctx {:keys [cp1x cp1y cp2x cp2y x y]}]), :arglists ([ctx cp1x cp1y cp2x cp2y x y] [ctx {:keys [cp1x cp1y cp2x cp2y x y]}]), :arglists-meta (nil nil)}, :method-params ([ctx cp1x cp1y cp2x cp2y x y] [ctx {:keys [cp1x cp1y cp2x cp2y x y]}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 7, :fn-var true, :arglists ([ctx cp1x cp1y cp2x cp2y x y] [ctx {:keys [cp1x cp1y cp2x cp2y x y]}])}, text-baseline {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 97, :column 7, :end-line 97, :end-column 20, :arglists (quote ([ctx alignment]))}, :name monet.canvas/text-baseline, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 20, :method-params ([ctx alignment]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx alignment]))}, font-style {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 57, :column 7, :end-line 57, :end-column 17, :arglists (quote ([ctx font]))}, :name monet.canvas/font-style, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 17, :method-params ([ctx font]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx font]))}, quadratic-curve-to {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 159, :column 7, :end-line 159, :end-column 25, :arglists (quote ([ctx cpx cpy x y] [ctx {:keys [cpx cpy x y]}])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([ctx cpx cpy x y] [ctx {:keys [cpx cpy x y]}]), :arglists ([ctx cpx cpy x y] [ctx {:keys [cpx cpy x y]}]), :arglists-meta (nil nil)}}, :name monet.canvas/quadratic-curve-to, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([ctx cpx cpy x y] [ctx {:keys [cpx cpy x y]}]), :arglists ([ctx cpx cpy x y] [ctx {:keys [cpx cpy x y]}]), :arglists-meta (nil nil)}, :method-params ([ctx cpx cpy x y] [ctx {:keys [cpx cpy x y]}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 5, :fn-var true, :arglists ([ctx cpx cpy x y] [ctx {:keys [cpx cpy x y]}])}, add-entity {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 195, :column 7, :end-line 195, :end-column 17, :arglists (quote ([mc k ent]))}, :name monet.canvas/add-entity, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 17, :method-params ([mc k ent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 3, :fn-var true, :arglists (quote ([mc k ent]))}, stroke {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 23, :column 7, :end-line 23, :end-column 13, :arglists (quote ([ctx]))}, :name monet.canvas/stroke, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 13, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, transform {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 130, :column 7, :end-line 130, :end-column 16, :arglists (quote ([ctx m11 m12 m21 m22 dx dy] [ctx {:keys [m11 m12 m21 m22 dx dy]}])), :doc "Multiplies a custom transformation matrix to the existing\n   HTML5 canvas transformation according to the follow convention:\n\n   [ x']   [ m11 m21 dx ] [ x ]\n   [ y'] = [ m12 m22 dy ] [ y ]\n   [ 1 ]   [ 0   0   1  ] [ 1 ]", :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([ctx m11 m12 m21 m22 dx dy] [ctx {:keys [m11 m12 m21 m22 dx dy]}]), :arglists ([ctx m11 m12 m21 m22 dx dy] [ctx {:keys [m11 m12 m21 m22 dx dy]}]), :arglists-meta (nil nil)}}, :name monet.canvas/transform, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([ctx m11 m12 m21 m22 dx dy] [ctx {:keys [m11 m12 m21 m22 dx dy]}]), :arglists ([ctx m11 m12 m21 m22 dx dy] [ctx {:keys [m11 m12 m21 m22 dx dy]}]), :arglists-meta (nil nil)}, :method-params ([ctx m11 m12 m21 m22 dx dy] [ctx {:keys [m11 m12 m21 m22 dx dy]}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 7, :fn-var true, :arglists ([ctx m11 m12 m21 m22 dx dy] [ctx {:keys [m11 m12 m21 m22 dx dy]}]), :doc "Multiplies a custom transformation matrix to the existing\n   HTML5 canvas transformation according to the follow convention:\n\n   [ x']   [ m11 m21 dx ] [ x ]\n   [ y'] = [ m12 m22 dy ] [ y ]\n   [ 1 ]   [ 0   0   1  ] [ 1 ]"}, restart {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 265, :column 7, :end-line 265, :end-column 14, :arglists (quote ([mc]))}, :name monet.canvas/restart, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 14, :method-params ([mc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 265, :end-line 265, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mc]))}, remove-entity {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 198, :column 7, :end-line 198, :end-column 20, :arglists (quote ([mc k]))}, :name monet.canvas/remove-entity, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 20, :method-params ([mc k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mc k]))}, text-align {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 93, :column 7, :end-line 93, :end-column 17, :arglists (quote ([ctx alignment]))}, :name monet.canvas/text-align, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 17, :method-params ([ctx alignment]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx alignment]))}, stroke-style {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 65, :column 7, :end-line 65, :end-column 19, :arglists (quote ([ctx color]))}, :name monet.canvas/stroke-style, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 19, :method-params ([ctx color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx color]))}, close-path {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 15, :column 7, :end-line 15, :end-column 17, :arglists (quote ([ctx]))}, :name monet.canvas/close-path, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 17, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, init {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 256, :column 7, :end-line 256, :end-column 11, :arglists (quote ([canvas & [context-type]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(canvas [context-type])], :arglists ([canvas & [context-type]]), :arglists-meta (nil)}}, :name monet.canvas/init, :variadic true, :file "js/out/monet/canvas.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(canvas [context-type])], :arglists ([canvas & [context-type]]), :arglists-meta (nil)}, :method-params [(canvas [context-type])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 1, :fn-var true, :arglists ([canvas & [context-type]])}, draw-loop {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 222, :column 7, :end-line 222, :end-column 16, :arglists (quote ([{:keys [canvas updating? ctx active entities], :as mc}]))}, :name monet.canvas/draw-loop, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 16, :method-params ([p__5942]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 222, :end-line 222, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [canvas updating? ctx active entities], :as mc}]))}, scale {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 122, :column 7, :end-line 122, :end-column 12, :arglists (quote ([ctx x y]))}, :name monet.canvas/scale, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 12, :method-params ([ctx x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ctx x y]))}, restore {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 114, :column 7, :end-line 114, :end-column 14, :arglists (quote ([ctx]))}, :name monet.canvas/restore, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 14, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, move-to {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 77, :column 7, :end-line 77, :end-column 14, :arglists (quote ([ctx x y]))}, :name monet.canvas/move-to, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 14, :method-params ([ctx x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ctx x y]))}, fill {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 19, :column 7, :end-line 19, :end-column 11, :arglists (quote ([ctx]))}, :name monet.canvas/fill, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 11, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, circle {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 46, :column 7, :end-line 46, :end-column 13, :arglists (quote ([ctx {:keys [x y r]}]))}, :name monet.canvas/circle, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 13, :method-params ([ctx p__5855]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx {:keys [x y r]}]))}, line-to {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 81, :column 7, :end-line 81, :end-column 14, :arglists (quote ([ctx x y]))}, :name monet.canvas/line-to, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 14, :method-params ([ctx x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ctx x y]))}, draw-image {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 144, :column 7, :end-line 144, :end-column 17, :arglists (quote ([ctx img x y] [ctx img {:keys [x y w h sx sy sw sh dx dy dw dh], :as params}])), :doc "Draws the image onto the canvas at the given position.\n   If a map of params is given, the number of entries is used to\n   determine the underlying call to make.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([ctx img x y] [ctx img {:keys [x y w h sx sy sw sh dx dy dw dh], :as params}]), :arglists ([ctx img x y] [ctx img {:keys [x y w h sx sy sw sh dx dy dw dh], :as params}]), :arglists-meta (nil nil)}}, :name monet.canvas/draw-image, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([ctx img x y] [ctx img {:keys [x y w h sx sy sw sh dx dy dw dh], :as params}]), :arglists ([ctx img x y] [ctx img {:keys [x y w h sx sy sw sh dx dy dw dh], :as params}]), :arglists-meta (nil nil)}, :method-params ([ctx img x y] [ctx img {:keys [x y w h sx sy sw sh dx dy dw dh], :as params}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 4, :fn-var true, :arglists ([ctx img x y] [ctx img {:keys [x y w h sx sy sw sh dx dy dw dh], :as params}]), :doc "Draws the image onto the canvas at the given position.\n   If a map of params is given, the number of entries is used to\n   determine the underlying call to make."}, get-context {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 8, :column 7, :end-line 8, :end-column 18, :arglists (quote ([canvas type]))}, :name monet.canvas/get-context, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 18, :method-params ([canvas type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([canvas type]))}, save {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 110, :column 7, :end-line 110, :end-column 11, :arglists (quote ([ctx]))}, :name monet.canvas/save, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 11, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, clear! {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 209, :column 7, :end-line 209, :end-column 13, :arglists (quote ([mc]))}, :name monet.canvas/clear!, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 13, :method-params ([mc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 209, :end-line 209, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mc]))}, stroke-rect {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 38, :column 7, :end-line 38, :end-column 18, :arglists (quote ([ctx {:keys [x y w h]}]))}, :name monet.canvas/stroke-rect, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 18, :method-params ([ctx p__5845]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx {:keys [x y w h]}]))}, start-updating {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 264, :column 7, :end-line 264, :end-column 21, :arglists (quote ([mc]))}, :name monet.canvas/start-updating, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 21, :method-params ([mc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 264, :end-line 264, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mc]))}, monet-canvas {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 247, :column 7, :end-line 247, :end-column 19, :arglists (quote ([elem context-type]))}, :name monet.canvas/monet-canvas, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 19, :method-params ([elem context-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 247, :end-line 247, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem context-type]))}, stroke-cap {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 73, :column 7, :end-line 73, :end-column 17, :arglists (quote ([ctx cap]))}, :name monet.canvas/stroke-cap, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 17, :method-params ([ctx cap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx cap]))}, stop {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 262, :column 7, :end-line 262, :end-column 11, :arglists (quote ([mc]))}, :name monet.canvas/stop, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 11, :method-params ([mc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 262, :end-line 262, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mc]))}, stroke-width {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 69, :column 7, :end-line 69, :end-column 19, :arglists (quote ([ctx w]))}, :name monet.canvas/stroke-width, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 19, :method-params ([ctx w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx w]))}, update-entity {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 204, :column 7, :end-line 204, :end-column 20, :arglists (quote ([mc k func & extra])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(mc k func extra)], :arglists ([mc k func & extra]), :arglists-meta (nil)}}, :name monet.canvas/update-entity, :variadic true, :file "js/out/monet/canvas.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(mc k func extra)], :arglists ([mc k func & extra]), :arglists-meta (nil)}, :method-params [(mc k func extra)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 204, :end-line 204, :max-fixed-arity 3, :fn-var true, :arglists ([mc k func & extra])}, fill-style {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 61, :column 7, :end-line 61, :end-column 17, :arglists (quote ([ctx color]))}, :name monet.canvas/fill-style, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 17, :method-params ([ctx color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx color]))}, get-pixel {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 101, :column 7, :end-line 101, :end-column 16, :arglists (quote ([ctx x y])), :doc "Gets the pixel value as a hash map of RGBA values"}, :name monet.canvas/get-pixel, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 16, :method-params ([ctx x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ctx x y])), :doc "Gets the pixel value as a hash map of RGBA values"}, rotate {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 118, :column 7, :end-line 118, :end-column 13, :arglists (quote ([ctx angle]))}, :name monet.canvas/rotate, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 13, :method-params ([ctx angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx angle]))}, alpha {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 85, :column 7, :end-line 85, :end-column 12, :arglists (quote ([ctx a]))}, :name monet.canvas/alpha, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 12, :method-params ([ctx a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx a]))}, translate {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 126, :column 7, :end-line 126, :end-column 16, :arglists (quote ([ctx x y]))}, :name monet.canvas/translate, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 16, :method-params ([ctx x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ctx x y]))}, get-entity {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 201, :column 7, :end-line 201, :end-column 17, :arglists (quote ([mc k]))}, :name monet.canvas/get-entity, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 17, :method-params ([mc k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 201, :end-line 201, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mc k]))}, fill-rect {:protocol-inline nil, :meta {:file "/Users/ykar/Projects/private/clj-turtle/js/out/monet/canvas.cljs", :line 42, :column 7, :end-line 42, :end-column 16, :arglists (quote ([ctx {:keys [x y w h]}]))}, :name monet.canvas/fill-rect, :variadic false, :file "js/out/monet/canvas.cljs", :end-column 16, :method-params ([ctx p__5850]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx {:keys [x y w h]}]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :m21 :m12 :r :dh :dx :else :w :sy :value :green :dy :entities :cpx :update :m11 :updating? :cpy :canvas :cp1x :cp2x :h :active :red :blue :cp1y :alpha :dw :sx :x :sh :sw :cp2y :draw :ctx :m22 :text}, :order [:x :y :w :h :r :text :red :green :blue :alpha :m11 :m12 :m21 :m22 :dx :dy :sh :sw :dh :sy :dw :sx :cpx :cpy :cp1x :cp1y :cp2x :cp2y :entities :value :draw :update :canvas :updating? :ctx :active :else]}, :doc nil}